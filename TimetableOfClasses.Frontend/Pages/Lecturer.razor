@inject HttpClient Http


@page "/lecturer"

<h3>Список преподавателей</h3>
@if (data == null) {
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Имя</th>
                <th>Фамилия</th>
                <th>Отчетсво</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in data)
            {
            <tr>
                @if (isEdit && activeId == item.id)
                {
                    <td><input class="form-control" type="text" @bind-value="LecturerFirstNameField" /></td>
                    <td><input class="form-control" type="text" @bind-value="LecturerSecondNameField" /></td>
                    <td><input class="form-control" type="text" @bind-value="LecturerPatronymicField"/></td>
                    <td><button type="button" class="btn btn-success" @onclick="() => EditItem(item.id)">Сохранить</button></td>
                    <td><button type="button" class="btn btn-danger" @onclick="ResetState">Сбросить</button></td>
                }
                else
                {
                    <td>@item.firstName</td>
                    <td>@item.secondName</td>
                    <td>@item.patronymic</td>
                    <td><button type="button" class="btn btn-secondary" @onclick="() => ChangeMode(item.id)">Редактировать</button></td>
                    <td><button type="button" class="btn btn-danger" @onclick="() => DeleteItem(item.id)">Удалить</button></td>
                }
            </tr>
            }
        <tr>
            <td><input class="form-control" type="number" @bind-value="LecturerFirstNameField"/></td>
            <td><input class="form-control" type="text" @bind-value="LecturerSecondNameField"/></td>
            <td><input class="form-control" type="text" @bind-value="LecturerPatronymicField"/></td>
            <td><button type="button" class="btn btn-success" @onclick="AddItem">Добавить</button></td>
        </tr>
        </tbody>
    </table>
}


@code {
    private List<LecturerType> data;

    public string LecturerFirstNameField { get; set; }
    public string LecturerSecondNameField { get; set; }
    public string LecturerPatronymicField { get; set; }
    private bool isEdit = false;
    private Guid activeId = new Guid("d81c0b4b-a9ce-44c5-d8f3-08d9d6a81919");

    public class StateInterface
    {
        public Boolean editActive;
        public string activeId;
    }

    public class LecturerType
    {
        public Guid id { get; set; }
        public string firstName { get; set; }
        public string secondName { get; set; }
        public string patronymic { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        data = await Http.GetFromJsonAsync<List<LecturerType>>("Lecturers/all");
    }

    private async Task DeleteItem(Guid id)
    {
        await Http.DeleteAsync("https://localhost:44321/api/v1/Lecturers/detail/{id}");
    }

    private async Task EditItem(Guid id)
    {
        var client = new HttpClient();
        var postBody = new { lecturerFirstame = LecturerFirstNameField, type = LecturerSecondNameField, lecturerPatronymic = LecturerPatronymicField};
        using var response = await client.PutAsJsonAsync("https://localhost:44321/api/v1/Lecturers/detail/{id}", postBody);
        ResetState();
    }

    private async Task AddItem()
    {
        var client = new HttpClient();
        var postBody = new { lecturerFirstName = LecturerFirstNameField, type = LecturerSecondNameField, lecturerPatronymic = LecturerPatronymicField};
        using var response = await client.PostAsJsonAsync("https://localhost:44321/api/v1/Lecturers/create", postBody);
    }

    private void ChangeMode(Guid id)
    {
        isEdit = true;
        activeId = id;
        var field = data.Find(el => el.id == id);
        LecturerFirstNameField = field.firstName;
        LecturerSecondNameField = field.secondName;
        LecturerPatronymicField = field.patronymic;
    }

    protected void ResetState()
    {
        isEdit = false;
        activeId = new Guid("d81c0b4b-a9ce-44c5-d8f3-08d9d6a81919");
    }
}