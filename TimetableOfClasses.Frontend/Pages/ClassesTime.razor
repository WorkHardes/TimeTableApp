@inject HttpClient Http


@page "/classestime"

<h3>Время пар</h3>
@if (data == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Номер пары</th>
                <th>Время начала пары</th>
                <th>Время конца пары</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in data)
            {
            <tr>
                @if (isEdit && activeId == item.id)
                {
                    <td><input class="form-control" type="number" @bind-value="ClassesTimeNumField" /></td>
                    <td><input class="form-control" type="datetime" @bind-value="ClassesTimeBeginTime" /></td>
                    <td><input class="form-control" type="datetime" @bind-value="ClassesTimeEndTime" /></td>
                    <td><button type="button" class="btn btn-success" @onclick="() => EditItem(item.id)">Сохранить</button></td>
                    <td><button type="button" class="btn btn-danger" @onclick="ResetState">Сбросить</button></td>
                }
                else
                {
                    <td>@item.classesTimeNum</td>
                    <td>@item.beginTime</td>
                    <td>@item.endTime</td>
                    <td><button type="button" class="btn btn-secondary" @onclick="() => ChangeMode(item.id)">Редактировать</button></td>
                    <td><button type="button" class="btn btn-danger" @onclick="() => DeleteItem(item.id)">Удалить</button></td>
                }
            </tr>
            }
        <tr>
            <td><input class="form-control" type="number" @bind-value="ClassesTimeNumField"/></td>
            <td><input class="form-control" type="text" @bind-value="ClassesTimeBeginTime"/></td>
            <td><button type="button" class="btn btn-success" @onclick="AddItem">Добавить</button></td>
        </tr>
        </tbody>
    </table>
}


@code {
    private List<ClassesTimeType> data;

    public int ClassesTimeNumField { get; set; }
    public DateTime ClassesTimeBeginTime { get; set; }
    public DateTime ClassesTimeEndTime { get; set; }
    private bool isEdit = false;
    private Guid activeId = new Guid("d81c0b4b-a9ce-44c5-d8f3-08d9d6a81919");

    public class StateInterface
    {
        public Boolean editActive;
        public string activeId;
    }

    public class ClassesTimeType
    {
        public Guid id { get; set; }
        public int classesTimeNum { get; set; }
        public DateTime beginTime { get; set; }
        public DateTime endTime { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        data = await Http.GetFromJsonAsync<List<ClassesTimeType>>("ClassesTimes/all");
    }

    private async Task DeleteItem(Guid id)
    {
        await Http.DeleteAsync("https://localhost:44321/api/v1/ClassesTimes/detail/{id}");
    }

    private async Task EditItem(Guid id)
    {
        var client = new HttpClient();
        var postBody = new { classesTimeNum = ClassesTimeNumField, beginTime = ClassesTimeBeginTime, endTime = ClassesTimeEndTime };
        using var response = await client.PutAsJsonAsync("https://localhost:44321/api/v1/ClassesTimes/detail/{id}", postBody);
        ResetState();
    }

    private async Task AddItem()
    {
        var client = new HttpClient();
        var postBody = new { classesTimeNum = ClassesTimeNumField, beginTime = ClassesTimeBeginTime, endTime = ClassesTimeEndTime};
        using var response = await client.PostAsJsonAsync("https://localhost:44321/api/v1/ClassesTimes/create", postBody);
    }

    private void ChangeMode(Guid id)
    {
        isEdit = true;
        activeId = id;
        var field = data.Find(el => el.id == id);
        ClassesTimeNumField = field.classesTimeNum;
        ClassesTimeBeginTime = field.beginTime;
        ClassesTimeEndTime = field.endTime;
    }

    protected void ResetState()
    {
        isEdit = false;
        activeId = new Guid("d81c0b4b-a9ce-44c5-d8f3-08d9d6a81919");
    }
}
